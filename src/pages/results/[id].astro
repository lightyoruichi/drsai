---
import Layout from '../../layouts/Layout.astro';

const { id } = Astro.params;

// In a real production app, you'd fetch from a database
// For now, we'll rely on sessionStorage on the client side
---

<Layout title="Results - DRS AI">
  <div class="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <!-- Success Header -->
    <div class="text-center mb-8">
      <div class="inline-flex items-center justify-center h-16 w-16 rounded-full bg-green-100 text-green-600 mb-4">
        <svg class="h-8 w-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
        </svg>
      </div>
      <h1 class="text-3xl sm:text-4xl font-bold text-gray-900 mb-2">
        Analysis Complete!
      </h1>
      <p class="text-lg text-gray-600">
        Your dental scan has been analyzed and results are temporarily shareable
      </p>
    </div>

    <!-- Shareable Link Card -->
    <div class="bg-gradient-to-br from-blue-50 to-purple-50 rounded-2xl p-8 mb-8 border border-blue-200">
      <div class="flex items-start space-x-4">
        <div class="flex-shrink-0">
          <svg class="h-8 w-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
          </svg>
        </div>
        <div class="flex-1">
          <h2 class="text-lg font-semibold text-gray-900 mb-2">Your Temporary Shareable Link</h2>
          <div class="flex items-center space-x-2">
            <input
              type="text"
              id="shareableLink"
              readonly
              value={`${Astro.url.origin}/results/${id}`}
              class="flex-1 px-4 py-2 bg-white border border-gray-300 rounded-lg text-sm text-gray-700 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <button
              id="copyButton"
              class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium text-sm"
            >
              Copy
            </button>
          </div>
          <p class="mt-2 text-sm text-orange-600 font-medium">
            ⚠️ This link is temporary and only works in this browser session. Save a screenshot for your records.
          </p>
        </div>
      </div>
    </div>

    <!-- Brief Results -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
      <!-- Main Content -->
      <div class="lg:col-span-2 space-y-6">
        <!-- Scan Image -->
        <div class="bg-white rounded-2xl shadow-xl p-6 border border-gray-200">
          <h2 class="text-xl font-bold text-gray-900 mb-4">Your Dental Scan</h2>
          <div class="bg-gray-100 rounded-lg p-4 flex items-center justify-center">
            <img id="scanImage" src="" alt="Dental Scan" class="max-w-full max-h-96 rounded-lg" />
          </div>
        </div>

        <!-- Overall Assessment -->
        <div class="bg-white rounded-2xl shadow-xl p-6 border border-gray-200">
          <h2 class="text-xl font-bold text-gray-900 mb-4">Overall Assessment</h2>
          <p id="overallAssessment" class="text-gray-700 leading-relaxed mb-4"></p>
          
          <div id="urgencyBadge" class="inline-flex items-center px-4 py-2 rounded-full text-sm font-medium">
            <!-- Will be filled by JS -->
          </div>
        </div>

        <!-- Comparison with Your Diagnosis -->
        <div class="bg-white rounded-2xl shadow-xl p-6 border border-gray-200">
          <h2 class="text-xl font-bold text-gray-900 mb-4">Comparison with Your Initial Diagnosis</h2>
          
          <div class="mb-4 p-4 bg-gray-50 rounded-lg">
            <p class="text-sm font-medium text-gray-700 mb-1">You said:</p>
            <p id="yourDiagnosis" class="text-gray-600 italic"></p>
          </div>

          <!-- What you got right -->
          <div id="correctFindings" class="mb-4">
            <h3 class="text-sm font-semibold text-green-700 mb-2 flex items-center">
              <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
              What you got right:
            </h3>
            <ul id="correctList" class="space-y-1 ml-7">
              <!-- Will be filled by JS -->
            </ul>
          </div>

          <!-- What you got wrong -->
          <div id="incorrectFindings" class="mb-4">
            <h3 class="text-sm font-semibold text-red-700 mb-2 flex items-center">
              <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
              What needs correction:
            </h3>
            <ul id="incorrectList" class="space-y-1 ml-7">
              <!-- Will be filled by JS -->
            </ul>
          </div>

          <!-- Additional findings -->
          <div id="additionalFindings">
            <h3 class="text-sm font-semibold text-blue-700 mb-2 flex items-center">
              <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
              Additional findings:
            </h3>
            <ul id="additionalList" class="space-y-1 ml-7">
              <!-- Will be filled by JS -->
            </ul>
          </div>
        </div>

        <!-- Key Findings -->
        <div class="bg-white rounded-2xl shadow-xl p-6 border border-gray-200">
          <h2 class="text-xl font-bold text-gray-900 mb-4">Key Findings</h2>
          <div id="findingsList" class="space-y-3">
            <!-- Will be filled by JS -->
          </div>
        </div>
      </div>

      <!-- Sidebar -->
      <div class="lg:col-span-1 space-y-6">
        <!-- Confidence Score -->
        <div class="bg-white rounded-2xl shadow-xl p-6 border border-gray-200">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">AI Confidence</h3>
          <div class="text-center">
            <div id="confidenceScore" class="text-5xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-2">
              <!-- Will be filled by JS -->
            </div>
            <p class="text-sm text-gray-600">Overall Confidence</p>
          </div>
          <div class="mt-4">
            <div class="w-full bg-gray-200 rounded-full h-3">
              <div id="confidenceBar" class="bg-gradient-to-r from-blue-600 to-purple-600 h-3 rounded-full transition-all duration-1000" style="width: 0%"></div>
            </div>
          </div>
        </div>

        <!-- Quick Recommendations -->
        <div class="bg-white rounded-2xl shadow-xl p-6 border border-gray-200">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">Quick Recommendations</h3>
          <ul id="recommendationsList" class="space-y-2 text-sm text-gray-700">
            <!-- Will be filled by JS -->
          </ul>
        </div>

        <!-- Disclaimer -->
        <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <div class="flex items-start space-x-2">
            <svg class="h-5 w-5 text-yellow-600 flex-shrink-0 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
            <div>
              <p class="text-xs font-medium text-yellow-800 mb-1">Medical Disclaimer</p>
              <p class="text-xs text-yellow-700">
                This AI analysis is informational only. Always consult a licensed dentist for medical advice.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Actions -->
    <div class="flex flex-col sm:flex-row justify-center space-y-4 sm:space-y-0 sm:space-x-4 mt-8">
      <a
        href={`/results/${id}/full`}
        class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-medium rounded-lg shadow-sm text-white bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 transition-all"
      >
        <svg class="mr-2 -ml-1 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
        View Full Results & Teeth Chart
      </a>
      
      <a
        href="/"
        class="inline-flex items-center justify-center px-6 py-3 border border-gray-300 text-base font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition-colors"
      >
        <svg class="mr-2 -ml-1 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
        </svg>
        Analyze Another Scan
      </a>
    </div>
  </div>

  <script>
    // Load analysis result
    const analysisResultStr = sessionStorage.getItem('analysisResult');
    
    if (analysisResultStr) {
      const result = JSON.parse(analysisResultStr);
      const diagnosis = result.diagnosis;

      // Display scan image
      const scanImage = document.getElementById('scanImage') as HTMLImageElement;
      if (scanImage && result.fileData) {
        scanImage.src = result.fileData;
      }

      // Display overall assessment
      const overallAssessment = document.getElementById('overallAssessment');
      if (overallAssessment) {
        overallAssessment.textContent = diagnosis.overallAssessment;
      }

      // Display urgency badge
      const urgencyBadge = document.getElementById('urgencyBadge');
      if (urgencyBadge) {
        const urgencyColors = {
          routine: 'bg-green-100 text-green-800',
          soon: 'bg-yellow-100 text-yellow-800',
          urgent: 'bg-orange-100 text-orange-800',
          emergency: 'bg-red-100 text-red-800'
        };
        const urgencyLabels = {
          routine: '✓ Routine Follow-up',
          soon: '⚠ Schedule Soon',
          urgent: '⚠️ Urgent Attention Needed',
          emergency: '🚨 Emergency - See Dentist ASAP'
        };
        urgencyBadge.className = `inline-flex items-center px-4 py-2 rounded-full text-sm font-medium ${urgencyColors[diagnosis.urgency]}`;
        urgencyBadge.textContent = urgencyLabels[diagnosis.urgency];
      }

      // Display your diagnosis
      const yourDiagnosis = document.getElementById('yourDiagnosis');
      if (yourDiagnosis) {
        yourDiagnosis.textContent = result.initialDiagnosis;
      }

      // Display comparison
      const comparison = diagnosis.comparisonWithInitialDiagnosis;
      
      const correctList = document.getElementById('correctList');
      if (correctList && comparison.correct.length > 0) {
        correctList.innerHTML = comparison.correct.map((item: string) => 
          `<li class="text-sm text-gray-700">✓ ${item}</li>`
        ).join('');
      } else if (correctList) {
        document.getElementById('correctFindings')?.classList.add('hidden');
      }

      const incorrectList = document.getElementById('incorrectList');
      if (incorrectList && comparison.incorrect.length > 0) {
        incorrectList.innerHTML = comparison.incorrect.map((item: string) => 
          `<li class="text-sm text-gray-700">✗ ${item}</li>`
        ).join('');
      } else if (incorrectList) {
        document.getElementById('incorrectFindings')?.classList.add('hidden');
      }

      const additionalList = document.getElementById('additionalList');
      if (additionalList && comparison.additional.length > 0) {
        additionalList.innerHTML = comparison.additional.map((item: string) => 
          `<li class="text-sm text-gray-700">+ ${item}</li>`
        ).join('');
      } else if (additionalList) {
        document.getElementById('additionalFindings')?.classList.add('hidden');
      }

      // Display confidence score
      const confidenceScore = document.getElementById('confidenceScore');
      const confidenceBar = document.getElementById('confidenceBar');
      if (confidenceScore) {
        confidenceScore.textContent = `${Math.round(diagnosis.confidenceScore)}%`;
      }
      if (confidenceBar) {
        setTimeout(() => {
          confidenceBar.style.width = `${diagnosis.confidenceScore}%`;
        }, 100);
      }

      // Display findings
      const findingsList = document.getElementById('findingsList');
      if (findingsList) {
        const severityColors = {
          none: 'bg-green-50 border-green-200 text-green-800',
          mild: 'bg-yellow-50 border-yellow-200 text-yellow-800',
          moderate: 'bg-orange-50 border-orange-200 text-orange-800',
          severe: 'bg-red-50 border-red-200 text-red-800'
        };
        
        findingsList.innerHTML = diagnosis.findings.map((finding: any) => `
          <div class="border-l-4 ${severityColors[finding.severity].includes('green') ? 'border-green-500' : severityColors[finding.severity].includes('yellow') ? 'border-yellow-500' : severityColors[finding.severity].includes('orange') ? 'border-orange-500' : 'border-red-500'} pl-4">
            <div class="flex items-start justify-between">
              <div class="flex-1">
                <h3 class="text-sm font-semibold text-gray-900 mb-1">${finding.category}</h3>
                <p class="text-sm text-gray-700 mb-2">${finding.description}</p>
                <div class="flex items-center space-x-3">
                  <span class="text-xs px-2 py-1 rounded ${severityColors[finding.severity]}">${finding.severity.toUpperCase()}</span>
                  <span class="text-xs text-gray-500">${Math.round(finding.confidence)}% confidence</span>
                </div>
              </div>
            </div>
          </div>
        `).join('');
      }

      // Display recommendations
      const recommendationsList = document.getElementById('recommendationsList');
      if (recommendationsList) {
        recommendationsList.innerHTML = diagnosis.recommendations.slice(0, 5).map((rec: string) => 
          `<li class="flex items-start space-x-2">
            <svg class="h-4 w-4 text-blue-600 flex-shrink-0 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
            <span>${rec}</span>
          </li>`
        ).join('');
      }
    }

    // Copy to clipboard functionality
    const copyButton = document.getElementById('copyButton');
    const shareableLink = document.getElementById('shareableLink') as HTMLInputElement;

    copyButton?.addEventListener('click', async () => {
      try {
        await navigator.clipboard.writeText(shareableLink.value);
        
        const originalText = copyButton.textContent;
        copyButton.textContent = 'Copied!';
        copyButton.classList.add('bg-green-600');
        copyButton.classList.remove('bg-blue-600');
        
        setTimeout(() => {
          copyButton.textContent = originalText;
          copyButton.classList.remove('bg-green-600');
          copyButton.classList.add('bg-blue-600');
        }, 2000);
      } catch (err) {
        console.error('Failed to copy:', err);
      }
    });
  </script>
</Layout>
